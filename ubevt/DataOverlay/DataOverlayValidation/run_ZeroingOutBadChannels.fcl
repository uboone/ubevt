#include "services_microboone.fcl"
#include "triggeralgo_service.fcl"
#include "ZeroingOutBadChannels.fcl"

process_name: ZeroingOutBadChannels

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "ZeroingOutBadChannels_ana.root" }
  TimeTracker:             {}
  ExptGeoHelperInterface:         @local::microboone_geometry_helper
  Geometry:                       @local::microboone_geo
  DetectorProperties:             @local::microboone_detproperties
  LArProperties:                  @local::microboone_properties
  DetectorClocksService:          @local::microboone_detectorclocks
  MemoryTracker:           { } # default is one
  RandomNumberGenerator:   {} #ART native random number generator
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

    producers:
 {

  ### Channel zeroing.
  zeroedoutchannels : @local::ZeroingOutBadChannels
 }
 analyzers:
 {
 }

 reco: [ zeroedoutchannels ]
 ana: []

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "ZeroingOutBadChannelsOutput_AdiPracticeFile.root"
   dataTier:    "reco"
   compressionLevel: 1
   outputCommands: ["keep *_*_*_*", "drop raw::RawDigits_nfspl1_raw_NFforBadChannles"]
   }
}

services.DetectorProperties.NumberTimeSamples:                             6400
services.DetectorProperties.ReadOutWindowSize:                             6400
services.DetectorClocksService.InheritClockConfig:                         false
services.DetectorClocksService.TriggerOffsetTPC:                          -1.600e3


### Here we include the file giving us run/data dependent overrides

### Here we try to suppress known and pointless messages
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}


